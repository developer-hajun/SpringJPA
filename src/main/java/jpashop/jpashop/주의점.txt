1. 가급적 Setter X -> 유지보수 어려움
2. 모든 연관관계 지연로딩
   -> WHY? 어떤 SQL사용될지 추적 어려움 + N+1 문제
   -> 연관된 엔티티 함꼐 DB조회 , fetch join 사용
3. XtoOne관계는 기본(즉시로딩) -> 지연 로딩으로 변경
4. 컬렉션 필드초기화
   -> 컬렉션 필드는 초반에 생성할떄 초기화해주고 컬렉션을 통해
   -> 조회만 하고 변경x
5. 연관관계 편의 메소드는 주로 FK키를 가지고 있는 곳에 설정
6. JPA는 트렌젝션 커밋 시점에 더팅 채킹을 해 바뀐 내용이 있으면 알아서 UPDATE쿼리를 날림
7. 엔티티가 비즈니스 로직 (도메인 모델 패턴 ) > 서비스 계층에 비즈니스로직( 트랜잭션 스크립트 패턴)
8. 요구사항 복잡 -> 엔티티에 화면을 처리하기위한 기능 증가 -> 엔티티가 화면에 종속
   -> 유지보수성 저하 -> but 엔티티는 비즈니스 only 비즈니스 로직
   -> 그렇기에 DTO나 Form을 사용해 화면이나 요구사항 처리
9. 병합(mergy) -> 병합할때 병합할 엔티티가 가지고있는 모든 값을 원래 Entity의 값은 사라짐
   -> 그렇기에 병합 될떄 병합될 Entity가 가지고있는 null도 함께 가지고옴 -> null값으로 업데이트 할 위험성
   -> 보통 실무에서는 변경가능한 데이터만 노출 -> 병합하는것이 더 번거로움 -> 서비스 계층에서 엔티티조회, 엔티티 데이터 직접 변경

